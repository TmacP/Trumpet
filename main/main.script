local conductor = require "main.conductor"
local target_position = nil
local speed = 0
local distance_to_target = 0  -- Will calculate this dynamically

local function flipbook_done(self)
	msg.post("GameManager#sprite", "play_animation", { id = hash("balancing"), playback = "once_forward" })
end

function init(self)
	-- Get the target position (assuming target is at y = 680)
	target_position = go.get_position("/trigger")
	local target_position_y = target_position.y
	print(target_position_y)

	-- Calculate the distance to target based on spawn position
	-- Assuming spawn position is at y = -33, you can adjust this if necessary
	local spawn_position = vmath.vector3(100, -33, 0)  -- Adjust spawn position here if needed
	distance_to_target = math.abs(target_position_y - spawn_position.y)

	-- Acquire input focus for detecting player input
	msg.post(".", "acquire_input_focus")

	-- Set up render settings
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	msg.post("GameManager#sprite", "play_animation", { id = hash("balancing"), playback = "loop" })

	-- Set up the sound system
	sound.play("song#sound", {}, function(self, message_id, message, sender)
		if message_id == hash("sound_done") then
			print("Sound has finished playing!")
			on_sound_done(self)
		elseif message_id == hash("sound_stopped") then
			print("Sound was stopped manually.")
		end
	end)

	-- Set up spawn timing
	self.spawn_interval = conductor.get_crotchet()
	self.time_since_last_spawn = 0
	self.factory_url = "#note"
	self.notes = {}

	-- Initialize player input states
	self.isLeftPressed = false
	self.isRightPressed = false
	self.isDownPressed = false

	-- Adjust note speed based on BPM from conductor
	self.note_speed = 0
end

function update(self, dt)
	-- Update conductor to get the correct tempo and BPM
	conductor.update(dt)

	-- Get the current BPM from the conductor
	local bpm = conductor.get_bpm()

	-- Calculate beats per second and then determine how fast notes should move
	local beats_per_second = bpm / 60
	self.note_speed = distance_to_target * beats_per_second / 2

	-- Update spawn timer
	self.time_since_last_spawn = self.time_since_last_spawn + dt
	if self.time_since_last_spawn >= self.spawn_interval then
		local variation = math.random(1, 3)
		local note_id = factory.create(self.factory_url, vmath.vector3(100, -33, 0))
		msg.post(note_id, "set_variation", { variation = variation })
		table.insert(self.notes, note_id)
		self.time_since_last_spawn = 0
	end

	-- Move the notes towards the target position
	for i = #self.notes, 1, -1 do
		local note_id = self.notes[i]
		if go.exists(note_id) then
			local position = go.get_position(note_id)
			-- Move the note based on the speed calculated with BPM
			position.y = position.y + (self.note_speed * dt)
			go.set_position(position, note_id)

			-- Remove the note if it has passed the target (y = 680)
			if position.y >= 680 then
				go.delete(note_id)
				table.remove(self.notes, i)
			end
		else
			table.remove(self.notes, i)
		end
	end
end

function on_input(self, action_id, action)
	-- Handle player input for character movements
	if action_id == hash("left") then
		if action.pressed then
			self.isLeftPressed = true
			sprite.play_flipbook("#sprite", "hips", flipbook_done)
		else
			self.isLeftPressed = false
		end
	elseif action_id == hash("right") then
		if action.pressed then
			self.isRightPressed = true
			sprite.play_flipbook("#sprite", "snap", flipbook_done)
		else
			self.isRightPressed = false
		end
	elseif action_id == hash("down") then
		if action.pressed then
			self.isDownPressed = true
			sprite.play_flipbook("#sprite", "slide", flipbook_done)
		else
			self.isDownPressed = false
		end
	end
end

function on_sound_done(self)
	-- Handle logic when sound finishes playing
	print("Song finished. Handle end-of-song logic here.")
end
