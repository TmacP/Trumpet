local conductor = require "main.conductor"

local speed = 350

local function flipbook_done(self)
	msg.post("GameManager#sprite", "play_animation", { id = hash("balancing"), playback = "once_forward" })
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	msg.post("GameManager#sprite", "play_animation", { id = hash("balancing"), playback = "loop" })

	sound.play("song#sound", {}, function(self, message_id, message, sender)
		if message_id == hash("sound_done") then
			print("Sound has finished playing!")
			on_sound_done(self)
		elseif message_id == hash("sound_stopped") then
			print("Sound was stopped manually.")
		end
	end)

	self.spawn_interval = conductor.get_crotchet()
	self.time_since_last_spawn = 0
	self.factory_url = "#note"
	self.notes = {}
	self.note_speed = speed

	self.isLeftPressed = false
	self.isRightPressed = false
	self.isDownPressed = false
end

function update(self, dt)
	conductor.update(dt)
	self.time_since_last_spawn = self.time_since_last_spawn + dt
	if self.time_since_last_spawn >= self.spawn_interval then
		local variation = math.random(1, 3)
		local note_id = factory.create(self.factory_url, vmath.vector3(100, -33, 0))
		msg.post(note_id, "set_variation", { variation = variation })
		table.insert(self.notes, note_id)
		self.time_since_last_spawn = 0
	end

	for i = #self.notes, 1, -1 do
		local note_id = self.notes[i]
		if go.exists(note_id) then
			local position = go.get_position(note_id)
			position.y = position.y + (self.note_speed * dt)
			go.set_position(position, note_id)
			if position.y > 680 then
				go.delete(note_id)
				table.remove(self.notes, i)
			end
		else
			table.remove(self.notes, i)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		if action.pressed then
			self.isLeftPressed = true
			sprite.play_flipbook("#sprite", "hips", flipbook_done)
		else
			self.isLeftPressed = false
		end
	elseif action_id == hash("right") then
		if action.pressed then
			self.isRightPressed = true
			sprite.play_flipbook("#sprite", "snap", flipbook_done)
		else
			self.isRightPressed = false
		end
	elseif action_id == hash("down") then
		if action.pressed then
			self.isDownPressed = true
			sprite.play_flipbook("#sprite", "slide", flipbook_done)
		else
			self.isDownPressed = false
		end
	end
end

function on_sound_done(self)
	print("Song finished. Handle end-of-song logic here.")
end
